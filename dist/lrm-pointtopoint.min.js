(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){module.exports=function(point1,point2){var coordinates1=point1.geometry.coordinates;var coordinates2=point2.geometry.coordinates;var lon1=toRad(coordinates1[0]);var lon2=toRad(coordinates2[0]);var lat1=toRad(coordinates1[1]);var lat2=toRad(coordinates2[1]);var a=Math.sin(lon2-lon1)*Math.cos(lat2);var b=Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1);var bearing=toDeg(Math.atan2(a,b));return bearing};function toRad(degree){return degree*Math.PI/180}function toDeg(radian){return radian*180/Math.PI}},{}],2:[function(require,module,exports){var invariant=require("turf-invariant");module.exports=function(point1,point2,units){invariant.featureOf(point1,"Point","distance");invariant.featureOf(point2,"Point","distance");var coordinates1=point1.geometry.coordinates;var coordinates2=point2.geometry.coordinates;var dLat=toRad(coordinates2[1]-coordinates1[1]);var dLon=toRad(coordinates2[0]-coordinates1[0]);var lat1=toRad(coordinates1[1]);var lat2=toRad(coordinates2[1]);var a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);var c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));var R;switch(units){case"miles":R=3960;break;case"kilometers":case"kilometres":R=6373;break;case"degrees":R=57.2957795;break;case"radians":R=1;break;case undefined:R=6373;break;default:throw new Error('unknown option given to "units"')}var distance=R*c;return distance};function toRad(degree){return degree*Math.PI/180}},{"turf-invariant":3}],3:[function(require,module,exports){module.exports.geojsonType=geojsonType;module.exports.collectionOf=collectionOf;module.exports.featureOf=featureOf;function geojsonType(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)}}function featureOf(value,type,name){if(!name)throw new Error(".featureOf() requires a name");if(!value||value.type!=="Feature"||!value.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!value.geometry||value.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.geometry.type)}}function collectionOf(value,type,name){if(!name)throw new Error(".collectionOf() requires a name");if(!value||value.type!=="FeatureCollection"){throw new Error("Invalid input to "+name+", FeatureCollection required")}for(var i=0;i<value.features.length;i++){var feature=value.features[i];if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}}},{}],4:[function(require,module,exports){var distance=require("turf-distance");var point=require("turf-point");module.exports=function(line,units){var coords;if(line.type==="Feature")coords=line.geometry.coordinates;else if(line.type==="LineString")coords=line.geometry.coordinates;else throw new Error("input must be a LineString Feature or Geometry");var travelled=0;for(var i=0;i<coords.length-1;i++){travelled+=distance(point(coords[i]),point(coords[i+1]),units)}return travelled}},{"turf-distance":2,"turf-point":5}],5:[function(require,module,exports){var isArray=Array.isArray||function(arg){return Object.prototype.toString.call(arg)==="[object Array]"};module.exports=function(coordinates,properties){if(!isArray(coordinates))throw new Error("Coordinates must be an array");if(coordinates.length<2)throw new Error("Coordinates must be at least 2 numbers long");return{type:"Feature",geometry:{type:"Point",coordinates:coordinates},properties:properties||{}}}},{}],6:[function(require,module,exports){module.exports=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return{type:"Feature",geometry:{type:"LineString",coordinates:coordinates},properties:properties||{}}}},{}],7:[function(require,module,exports){module.exports=function(x,y,properties){if(x instanceof Array){properties=y;y=x[1];x=x[0]}else if(isNaN(x)||isNaN(y))throw new Error("Invalid coordinates");return{type:"Feature",geometry:{type:"Point",coordinates:[x,y]},properties:properties||{}}}},{}],8:[function(require,module,exports){(function(global){(function(){"use strict";var turf={};turf.linestring=require("turf-linestring");turf.lineDistance=require("turf-line-distance");turf.distance=require("turf-distance");turf.point=require("turf-point");turf.bearing=require("turf-bearing");var L=typeof window!=="undefined"?window["L"]:typeof global!=="undefined"?global["L"]:null;L.Routing=L.Routing||{};L.Routing.PointToPoint=L.Class.extend({options:{speed:1},initialize:function(options){L.Util.setOptions(this,options)},route:function(waypoints,callback,context,options){var wps=[],coordinates=[],latlngs=[],alts=[],wp,routeLinestring;for(var i=0;i<waypoints.length;i++){wp=waypoints[i];wps.push({latLng:wp.latLng,name:wp.name,options:wp.options});latlngs.push(L.latLng(wp.latLng.lat,wp.latLng.lng));coordinates.push([wp.latLng.lng,wp.latLng.lat])}routeLinestring=turf.linestring(coordinates);alts.push({name:""+coordinates.length+" Points",coordinates:latlngs,instructions:this._calculateInstructions(routeLinestring),summary:{totalDistance:turf.lineDistance(routeLinestring,"kilometers")*1e3,totalTime:turf.lineDistance(routeLinestring,"kilometers")*1e3*this.options.speed},inputWaypoints:wps,actualWaypoints:wps});callback.call(context,null,alts);return this},_calculateInstructions:function(feature){var result=[],i,type,distance,bearing,road,lastPoint,thisPoint,nextPoint;for(i=0;i<feature.geometry.coordinates.length;i++){thisPoint=turf.point(feature.geometry.coordinates[i]);if(i+1<feature.geometry.coordinates.length){nextPoint=turf.point(feature.geometry.coordinates[i+1])}else{nextPoint=null}if(i==0){type="StartAt";road="0"}else if(i==feature.geometry.coordinates.length-1){type="DestinationReached";road=i.toFixed(0)+" to "+(i+1).toFixed(0)}else{type="WaypointReached";road=i.toFixed(0)}if(nextPoint){distance=turf.distance(thisPoint,nextPoint)*1e3;bearing=turf.bearing(thisPoint,nextPoint)}else{distance=0;bearing=0}result.push({type:type,distance:distance,time:0,road:"",direction:this._bearingString(bearing),index:i,text:""});lastPoint=thisPoint}return result},_bearingString:function(degrees){return["N","NE","E","SE","S","SW","W","NW"][parseInt((degrees+22.5)/45%8)]}});L.Routing.pointToPoint=function(options){return new L.Routing.PointToPoint(options)};module.exports=L.Routing.PointToPoint})()}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{"turf-bearing":1,"turf-distance":2,"turf-line-distance":4,"turf-linestring":6,"turf-point":7}]},{},[8]);